#!/usr/bin/env bash

#: TITLE: crc-create
#: DATE: 2019-04-23
#: VERSION: 0.1.0
#: AUTHOR: "Alex Y" <aleksandryackovlev@yandex.ru>
#: DESCRIPTION: Creates React Component
#: OPTIONS: -t <TEMPLATE> - template name, default to "default"
#:          -f - create a file component
#:          -s - add styles to the component
#:          -d <DIRECTORY> - create component in a <DIRECTORY>, default to PWD
#:          -l <LIFECYCLE_METHODS> - add a given list of lifecycle methods
#:          -h <HANDLERS> - add a given list of arrow functions
#:          -m <METHODS> - add a given list of methods

[[ $crcCreateLoaded ]] && return

source ./crc-env
source ./crc-config
source ./crc-utils
source ./crc-validate
source ./crc-input

# DESCRIPTION: Replace the css import variable
# USAGE: addStylesOutput ARGUMENT
addStylesOutput() {
  if [[ "${1:-0}" -eq 1 ]]; then 
    echo "s/%CSS_IMPORT%/import '.\/index.${2:-css}';/g"
  else
    echo '/%CSS_IMPORT%/d'
  fi
}

# DESCRIPTION: Return the extention of the styles file
# USAGE: getStylesFileExtention
getStylesFileExtention() {
  local templateDir
  templateDir=$1

  if [[ -f "$templateDir"/styles.css ]]; then
    echo css
  elif [[ -f "$templateDir"/styles.scss ]]; then
    echo scss
  elif [[ -f "$templateDir"/styles.less ]]; then
    echo less
  elif [[ -f "$templateDir"/styles.styl ]]; then
    echo styl
  else
    crc-utils die "$(crc-env cannotExecuteErrorCode)" "The style template file doesn't exist"
  fi
}

# DESCRIPTION: Create the styles file
# USAGE: createStylesFile ARGUMENTS
createStylesFile() {
  local addStyles
  local componentName
  local stylesTemplate
  local stylesFile

  addStyles="$1"
  stylesTemplate="$2"
  componentName="$3"
  stylesFile="$4"

  if [[ $addStyles -eq 0 ]]; then
    return 0
  fi

  if [[ ! -f $stylesTemplate ]]; then
    crc-utils die "$(crc-env cannotExecuteErrorCode)" "The css template file doesn't exist"
  fi

  sed "s/%COMPONENT_NAME%/${componentName,}/g" "$stylesTemplate" > "$stylesFile"
}

# DESCRIPTION: Return a sed command for a component name replacement
# USAGE: replaceComponentName
replaceComponentName() {
  echo "s/%COMPONENT_NAME%/$1/g"
}

# DESCRIPTION: Create the component file
# USAGE: createComponentFile ARGUMENTS
createComponentFile() {
  local sedCommands
  local componentTemplate
  local componentFile
  local replaceFile

  sedCommands="$1"
  componentTemplate="$2"
  componentFile="$3"
  replaceFile=

  if [[ ! -f $componentTemplate ]]; then
    crc-utils die "$(crc-env cannotExecuteErrorCode)" "The css template file doesn't exist"
  fi

  if [[ -f "$componentFile" ]]; then
    replaceFile="$(crc-input radio -p "The file already exists. Continue?")"

    case $replaceFile in
      [!yY])
        crc-utils die "$(crc-env successCode)" "Stop executing the script"
        ;;
    esac

    rm -f "$componentFile" || die "$(crc-env cannotExecuteErrorCode)" "The file can't be deleted"
  fi

  sed "$sedCommands" "$componentTemplate" > "$componentFile"
}

# DESCRIPTION: Create the component directory
# USAGE: createComponentDirectory ARGUMENT
createComponentDirectory() {
  local componentName
  componentName="$1"

  if [[ -z $componentName ]]; then
    crc-utils die "$(crc-env cannotExecuteErrorCode)" "The component name is not given"
  fi

  if [[ -d "$componentName" ]]; then
    replaceDirectory="$(crc-input radio -p "The directory already exists. Continue?")"

    case $replaceDirectory in
      [!yY])
        crc-utils die "$(crc-env generalErrorCode)" "Stop executing the script"
        ;;
    esac

    rm -rf "$componentName" || crc-utils die "$(crc-env cannotExecuteErrorCode)" "The directory can't be deleted"
  fi

  mkdir "$componentName" || crc-utils die "$(crc-env cannotExecuteErrorCode)" "The directory can't be created"
}

# DESCRIPTION: Return the extention of the component file
# USAGE: getComponentFileExtention
getComponentFileExtention() {
  local templateDir
  templateDir="$1"

  if [[ -f "$templateDir"/component.js ]]; then
    echo js
  elif [[ -f "$templateDir"/component.jsx ]]; then
    echo jsx
  elif [[ -f "$templateDir"/component.ts ]]; then
    echo ts
  else
    crc-utils die "$(crc-env generalErrorCode)" "The component's template file doesn't exist"
  fi
}

# DESCRIPTION: Return a sed command for lifecycle methods
# USAGE: addLifecycleMethods ARGUMENT
addLifecycleMethods() {
  local output
  local IFS
  local isAlnum
  output=

  if [[ -n $1 ]]; then
    IFS=':' read -ra methods <<< "$1"

    for method in "${methods[@]}"; do
      isAlnum=$(crc-validate alnum "$method")

      if [[ -n $isAlnum ]]; then
        crc-utils die "$(crc-env generalErrorCode)" "Names of lifecycle methods could not contain special characters"
      fi

      case "$method" in
        componentDidMount|shouldComponentUpdate|getSnapshotBeforUpdate|componentDidUpdate|componentDidCatch|componentWillUnmount)
          if [[ -n $output ]]; then
            output="$output\n  "
          fi
          output="${output}${method}() {\n\n  }\n"
          ;;
      esac
    done

    if [[ -n $output ]]; then
      echo "s/%LIFECYCLE_METHODS%/$output/g"
    else
      echo '/%LIFECYCLE_METHODS%/d'
    fi
  else
    echo '/%LIFECYCLE_METHODS%/d'
  fi
}

# DESCRIPTION: Return a sed command for handlers
# USAGE: addHandlers ARGUMENT
addHandlers() {
  local output
  local isAlnum
  output=

  if [[ -n $1 ]]; then
    IFS=':' read -ra methods <<< "$1"

    for method in "${methods[@]}"; do
      isAlnum=$(crc-validate alnum "$method")

      if [[ -n $isAlnum ]]; then
        crc-utils die "$(crc-env generalErrorCode)" "Names of handlers could not contain special characters"
      fi

      if [[ -n $output ]]; then
        output="$output\n  "
      fi
      output="${output}${method} = () => {\n\n  };\n"
    done

    if [[ -n $output ]]; then
      echo "s/%HANDLERS%/$output/g"
    else
      echo '/%HANDLERS%/d'
    fi
  else
    echo '/%HANDLERS%/d'
  fi
}

# DESCRIPTION: Return a sed command for methods
# USAGE: addMethods ARGUMENT
addMethods() {
  local output
  local isAlnum
  output=

  if [[ -n $1 ]]; then
    IFS=':' read -ra methods <<< "$1"

    for method in "${methods[@]}"; do
      isAlnum=$(crc-validate alnum "$method")

      if [[ -n $isAlnum ]]; then
        crc-utils die "$(crc-env generalErrorCode)" "Names of methods could not contain special characters"
      fi

      if [[ -n $output ]]; then
        output="$output\n  "
      fi
      output="${output}${method}() {\n\n  }\n"
    done

    if [[ -n $output ]]; then
      echo "s/%METHODS%/$output/g"
    else
      echo '/%METHODS%/d'
    fi
  else
    echo '/%METHODS%/d'
  fi
}

# DESCRIPTION: Return a sed command for props
# USAGE: addProps ARGUMENT
addProps() {
  echo '/%PROP_TYPES_IMPORT%/d; /%PROPS%/d; /%PROP_TYPES_DEFINITION%/d; /%DEFAULT_PROPS%/d'
}

# DESCRIPTION: Create a React component
# USAGE: crc-create ARGUMENTs
crc-create() {
  crc-config read

  ## Initialize defaults
  componentName=
  template="${template:-$defaultTemplate}"
  createFileComponent="${createFileComponent:-$defaultCreateFileComponent}"
  addCss="${addCss:-$defaultAddCss}"
  directory="$PWD"
  lifecycleMethods=
  handlers=
  methods=

  templateDir="$(crc-env templateDirectory)/$template"

  ## Options
  opts=t:fsd:l:h:m:
  OPTIND=1

  while getopts $opts opt; do
    case $opt in
      t)
        template="$OPTARG"
        templateDir="$(crc-env templateDirectory)/$template"
        ;;
      f)
        createFileComponent=1
        ;;
      s)
        addCss=1
        ;;
      d)
        directory="$OPTARG"
        ;;
      l)
        lifecycleMethods="$OPTARG"
        ;;
      h)
        handlers="$OPTARG"
        ;;
      m)
        methods="$OPTARG"
        ;;
      *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown options was given"
        ;;
    esac
  done

  shift $((OPTIND - 1))

  componentName="${1^}"
  shift

  if [[ -z $componentName ]]; then
    crc-utils die "$(crc-env misuseErrorCode)" "The name of a component is required"
  fi

  if [[ ! -d $directory ]]; then
    crc-utils die "$(crc-env misuseErrorCode)" "The directory of a component doesn't exist"
  fi

  case $componentName in
    *[!A-Za-z0-9_]*)
      crc-utils die "$(crc-env misuseErrorCode)" "The name of a component should contain only letters, digits and hyphens"
      ;;
  esac

  if [[ ! -d $templateDir ]]; then
    crc-utils die "$(crc-env misuseErrorCode)" "The template directory doesn't exist"
  fi

  stylesFileExtention="$(getStylesFileExtention "$templateDir")"
  componentFileExtention="$(getComponentFileExtention "$templateDir")"
  componentTemplate="$templateDir"/component."$componentFileExtention"
  stylesTemplate="$templateDir"/styles."$stylesFileExtention"
  componentFile="$componentName"."$componentFileExtention"
  stylesFile=index."$stylesFileExtention"


  if [[ $createFileComponent -eq 0 ]]; then
    componentFile="$componentName"/"$componentFile"
    stylesFile="$componentName"/"$stylesFile"

    createComponentDirectory "$directory"/"$componentName"
    printf "%s" "export { default } from './$componentName';" > "$directory"/"$componentName"/index.js
  else
    addCss=0
  fi

  componentFile="$directory"/"$componentFile"
  stylesFile="$directory"/"$stylesFile"

  sedCommands="$(replaceComponentName "$componentName"); $(addStylesOutput "$addCss" "$stylesFileExtention")"
  sedCommands="$sedCommands""; $(addLifecycleMethods "$lifecycleMethods"); $(addHandlers "$handlers")"
  sedCommands="$sedCommands""; $(addMethods "$methods"); $(addProps "$@")"

  echo "$sedCommands"

  createStylesFile "$addCss" "$stylesTemplate" "$componentName" "$stylesFile"
  createComponentFile "$sedCommands" "$componentTemplate" "$componentFile"

  echo 'The component has been successfully created'
}

# crc-create -m "doSomething" -h "handleSubmit:handleClick" -l "componentDidMount:componentWillUnmount" SomeComponent

crcCreateLoaded=1
