#!/usr/bin/env bash

#: TITLE: crc-help
#: DATE: 2019-04-23
#: VERSION: 0.1.0
#: AUTHOR: "Alex Y" <aleksandryackovlev@yandex.ru>
#: DESCRIPTION: Help information

[[ $crcHelpLoaded ]] && return

source ./crc-env
source ./crc-utils

# DESCRIPTION: Print the usage information
# USAGE: usage
showUsageInfo() {
  printf "%s - %s\n" "$(crc-env scriptName)" "$(crc-env description)"
  cat <<- HELP
USAGE: "$(crc-env usage)"

These are command used in various situations:

    create        Create a React component
    template      Create, read, update or delete a template
    config        Create, edit or delete a local crc config for a directory

See 'crc help <COMMAND>' to read about a specific subcommand.
HELP
}

# DESCRIPTION: Print the help information on the crc-create command
# USAGE: showCreateHelp
showCreateHelp() {
  printf "%s - %s\n" "$(crc-env scriptName)" "$(crc-env description)"
  cat <<- HELP

NAME
        crc-create - Ceate React components

SYNOPSIS
        crc create [-f] [-s] [-t <TEMPLATE>] [-d <DIRECTORY>] [ -l <LIFECYCLE_METHODS>]
                [-h <HANDLERS>] [-m <METHODS>] <COMPONENT_NAME> [<PROPS>]
        crc create -i

DESCRIPTION
        If a place for an option is not defined in a template, it will not appear in the resulting
        file even if it is set in the command.

        If -f (create a one-file component) and -s (add styles) are given, the -s option will be
        ignored.

        If -i (interactive) is given, other parameters except <COMPONENT_NAME> will be ignored.

OPTIONS
        -f
            Create a file component.

        -s
            Add a styles to the component.

        -t <TEMPLATE>
            Create a component from the template with the name <TEMPLATE>.
            By default it is set to a "default" template.

        -d <DIRECTORY>
            Create component in a <DIRECTORY>.
            By default it is set to the current working directory.

        -l <LIFECYCLE_METHODS>
            Add a given list of lifecycle methods.
            Methods should be given as a string that consits of method names separated by colons.

        -h <HANDLERS>
            Add a given list of arrow functions.
            Handlers should be given as a string that consits of their names separated by colons.

        -m <METHODS>
            Add a given list of methods.
            Handlers should be given as a string that consits of their names separated by colons.

        -i
            Create a component interactively.
            If this option is given, all other parameters except <COMPONENT_NAME> will be ignored.

        <COMPONENT_NAME>
            The name of a component that should be created written in camelcase.

        <PROPS>
            A list of props that should be added to a component.
            Every props should be written a separate parameter and should consist of a name,
            propType and defaultProp separated by colons.
            If a defaultProp is not given the prop is considered as a required one.

EXAMPLES
          Create a directory with a SomeComponent component from the default template:

              $ crc create SomeComponent


          Create a directory with a SomeComponent component from the "some-template" template:

              $ crc create -t some-template SomeComponent


          Create a file component from the "some-template" template:

              $ crc create -t some-template -f SomeComponent


          Create a directory with a SomeComponent component from the "some-template" template
          adding styles:

              $ crc create -t some-template -s SomeComponent


          Create a directory with a SomeComponent component from the "default" template adding a
          given list of props:

              $ crc create SomeComponent "somePropName:PropType:defalutValue"


          Create a directory with a SomeComponent component from the "default" template adding a
          given list of lifecycle methods:

              $ crc create -l "componentDidMount:componentWillUnmount" SomeComponent


          Create a directory with a SomeComponent component from the "default" template adding a
          given list of handlers:

              $ crc create -h "handleChange:handleClick" SomeComponent


          Create a SomeComponent component with a given list of handlers:

              $ crc create -m "handleChange:handleClick" SomeComponent


          Create a SomeComponent component interactively:

              $ crc create -i SomeComponent

SEE ALSO
        crc-template, crc-config

HELP
}

# DESCRIPTION: Print the help information on the crc-config command
# USAGE: showConfigHelp
showConfigHelp() {
  printf "%s - %s\n" "$(crc-env scriptName)" "$(crc-env description)"
  cat <<- HELP

NAME
        crc-config - Ceate React components

SYNOPSIS
        crc config <COMMAND>

DESCRIPTION
        The command handles local config files.

        If there is no config file in PWD, it is going to be looked for in ancestor directories.
        The first file, that is found in a list of ancestor directories, is considered as an active
        local config.

        Config files are going to be edited in the default EDITOR.

COMMANDS
        create [<DIRECTORY>]
            Create a local config file component.
            By default <DIRECTORY> is set to PWD

        edit
            Edit a local config file component if it exits.

        delete
            Delete a local config file component if it exits.

EXAMPLES
          Create a config file in a current directory:

              $ crc config create 


          Edit the active config file if it exists:

              $ crc config edit 


          Delete the active config file if it exists:

              $ crc config delete 

SEE ALSO
        crc-template, crc-create

HELP
}

# DESCRIPTION: Print the version information
# USAGE: version
showVersionInfo() {
  printf "%s version %s\n" "$(crc-env scriptName)" "$(crc-env version)"
  printf "by %s\n" "$(crc-env author)"
}

# DESCRIPTION: The entry point for the crc-help
# USAGE: crc-help [COMMAND]
crc-help() {
  local commandToExec
  commandToExec="$1"
  shift

  if [[ -z $commandToExec ]]; then
    showUsageInfo
    die "$(crc-env successCode)"
  fi

  case $commandToExec in
    create)
        showCreateHelp | less
      ;;
    template)
        echo 'template help info'
      ;;
    config)
        showConfigHelp | less
      ;;
    version)
        showVersionInfo
      ;;
    *)
        die "$(crc-env misuseErrorCode)" "An unknown command crc-help ""$commandToExec"
      ;;
  esac
}

crcHelpLoaded=1
