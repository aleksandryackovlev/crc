#!/usr/bin/env bash
#: Title: crc-config - FUnctions for interaction with users
#: Date: 2019-04-23
#: Version: 0.1.0
#: Author: "Alex Y" <aleksandryackovlev@yandex.ru>
#: Description: Defferent funcrions for taking inputs from users

[[ $crcInputLoaded ]] && return

source ./crc-env
source ./crc-utils
source ./crc-output

required() {
  if [[ -z $1 ]]; then
    echo 'The field is required'
  fi
}

textInput() {
  local text
  local prompt
  local defaultPrompt
  local defaultValue
  local validator
  local validationResult
  local invalidPrompt
  local opts

  text=
  prompt=
  defaultPrompt='Input: '
  defaultValue=
  validator=
  clearCanvas=0
  opts=p:d:v:c

  while getopts $opts opt; do
    case $opt in
      p)
        prompt="${OPTARG:-$defaultPrompt}"
        ;;
      d)
        defaultValue="$OPTARG"
        ;;
      v)
        validator="$OPTARG"
        ;;
      c)
        clearCanvas=1
        ;;
      *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown options is set for a text input"
        ;;
    esac
  done

  shift $((OPTIND - 1))

  if [[ -n $defaultValue ]]; then
    prompt="${prompt} (default = ${defaultValue})"
  fi

  if [[ $clearCanvas -eq 1 ]]; then
    clear
  fi

  if [[ -n $prompt ]]; then
    prompt="$prompt: "
    read -r -p "$prompt" text
  else 
    read -r text
  fi

  text="${text:-$defaultValue}"

  if [[ -n $validator ]]; then

    validationResult=$($validator "$text" 2> /dev/null)

    while [[ -n $validationResult ]]; do
      invalidPrompt="$validationResult $prompt"

      if [[ $clearCanvas -eq 1 ]]; then
        clear
      fi

      read -r -p "$invalidPrompt" text

      text="${text:-$defaultValue}"
      validationResult=$($validator "$text")
    done
  fi

  echo "$text"
}

selectInput() {
  max=$#

  input=
  activeItem=1

  while true; do
    clear
    hideCursor

    menuNum=1

    for item; do
      description="${item#*:}"
      color=7

      if [[ $activeItem -eq "$menuNum" ]]; then
        color=4
      fi

      printf "\e[3%dm%${#max}d: %s\n" "$color" "$menuNum" "$description" >&1

      menuNum=$(( menuNum + 1))
    done
    printf "\e[m"

    read -sn1 value
    read -sN1 -t 0.0001 k1
    read -sN1 -t 0.0001 k2
    read -sN1 -t 0.0001 k3

    value=${value}${k1}${k2}${k3}

    case "$value" in
      k|$'\e[A'|$'\e0A')  # cursor up: previous item
        if [[ $activeItem -gt 1 ]]; then
          activeItem=$(( activeItem -1 ))
        fi
        ;;

      j|$'\e[B'|$'\e0B')  # cursor down: next item
        if [[ $activeItem -lt $max ]]; then
          activeItem=$(( activeItem + 1 ))
        fi
        ;;

      $'\e[1~'|$'\e0H'|$'\e[H')  # home: first item
        activeItem=1
        ;;

      $'\e[4~'|$'\e0F'|$'\e[F')  # end: last item
        activeItem="$max"
        ;;

      q|'') # q, carriage return: quit
        input="${!activeItem%%:*}"
        showCursor
        return
        ;;
    esac 
  done
}

radioInput() {
  echo radio
}

crc-input() {
  local commandToExec
  commandToExec="$1"
  shift

  case $commandToExec in
    text)
        textInput "$@"
      ;;
    select)
        selectInput "$@"
      ;;
    radio)
        radioInput "$@"
      ;;
    *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown command crc-input ""$commandToExec"
      ;;
  esac
}

crcInputLoaded=1
