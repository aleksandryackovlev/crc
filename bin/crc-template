#!/usr/bin/env bash

#: TITLE: crc-template
#: DATE: 2019-04-23
#: VERSION: 0.1.0
#: AUTHOR: "Alex Y" <aleksandryackovlev@yandex.ru>
#: DESCRIPTION: Functions for templates' manipulations

[[ $crcTemplateLoaded ]] && return

source crc-env
source crc-utils

# DESCRIPTION: Creates a template directory
# USAGE: createTemplate [-n] [-j JS_FILE_EXTENTION] [-s CSS_FILE_EXTENTION] TEMPLATE
createTemplate() {
  local template
  local currentEditor
  local templateDir
  local componentExtention
  local stylesExtention
  local shouldEdit

  shouldEdit=1
  componentExtention=js
  stylesExtention=css

  ## Options
  opts=j:s:n
  OPTIND=1

  while getopts $opts opt; do
    case $opt in
      j)
        if [[ $OPTARG = js || $OPTARG = jsx || $OPTARG = ts ]]; then
          componentExtention="$OPTARG"
        fi
        ;;
      s)
        if [[ $OPTARG = css || $OPTARG = styl || $OPTARG = sass || $OPTARG = less ]]; then
          stylesExtention="$OPTARG"
        fi
        ;;
      n)
        shouldEdit=0
        ;;
      *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown options was given"
        ;;
    esac
  done

  shift $((OPTIND - 1))

  template="$1"

  templateDir="$(crc-env templateDirectory)/$template"

  if [[ -d $templateDir ]]; then
    crc-utils die "$(crc-env generalErrorCode)" "The template $template already exists"
  fi

  mkdir "$templateDir" || crc-utils die "$(crc-env generalErrorCode)" "The template cannot be created"
  touch "$templateDir"/component."$componentExtention" || crc-utils die "$(crc-env generalErrorCode)" "The template cannot be created"
  touch "$templateDir"/styles."$stylesExtention" || crc-utils die "$(crc-env generalErrorCode)" "The template cannot be created"

  if [[ $shouldEdit -eq 1 ]]; then
    currentEditor="$(crc-utils getEditor)"

    "$currentEditor" "$templateDir/component.$componentExtention"
    "$currentEditor" "$templateDir/styles.$stylesExtention"
  fi

  echo "Template has been created"
}

# DESCRIPTION: Copy a template
# USAGE: copyTemplate OLD_TEMPLATE NEW_TEMPLATE
copyTemplate() {
  local existingTemplate
  local template
  local currentEditor
  local templateDir
  local existingTemplateDir
  local shouldEdit

  shouldEdit=1

  ## Options
  opts=n
  OPTIND=1

  while getopts $opts opt; do
    case $opt in
      n)
        shouldEdit=0
        ;;
      *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown options was given"
        ;;
    esac
  done

  shift $((OPTIND - 1))

  existingTemplate="$1"
  template="$2"

  existingTemplateDir="$(crc-env templateDirectory)/$existingTemplate"
  templateDir="$(crc-env templateDirectory)/$template"

  if [[ -d $templateDir ]]; then
    crc-utils die "$(crc-env generalErrorCode)" "The template $template already exists"
  fi

  if [[ ! -d $existingTemplateDir ]]; then
    crc-utils die "$(crc-env generalErrorCode)" "The template $existingTemplateDir doesn't exist"
  fi

  cp -r -- "$existingTemplateDir" "$templateDir" || crc-utils die "$(crc-env generalErrorCode)" "The template cannot be created"

  if [[ $shouldEdit -eq 1 ]]; then
    currentEditor="$(crc-utils getEditor)"

    for file in "$templateDir"/* ; do
      if [[ -f $file ]]; then
        "$currentEditor" "$file"
      fi
    done;
  fi

  echo "Template has been created"
}

# DESCRIPTION: Edit a template
# USAGE: editTemplate TEMPLATE
editTemplate() {
  local template
  local currentEditor
  local templateDir

  template="$1"

  templateDir="$(crc-env templateDirectory)/$template"

  if [[ ! -d $templateDir ]]; then
    crc-utils die "$(crc-env generalErrorCode)" "The template $template doesn't exist"
  fi

  currentEditor="$(crc-utils getEditor)"

  for file in "$templateDir"/* ; do
    if [[ -f $file ]]; then
      "$currentEditor" "$file"
    fi
  done;

  echo "Template has been edited"
}

# DESCRIPTION: Delete a template
# USAGE: deleteTemplate TEMPLATE
deleteTemplate() {
  local template
  local templateDir

  template="$1"
  templateDir="$(crc-env templateDirectory)/$template"

  case $template in
    default|classical)
      crc-utils die "$(crc-env generalErrorCode)" "System templates cannot be deleted"
      ;;
  esac

  rm -rf "$templateDir" || crc-utils die "$(crc-env generalErrorCode)" "The template cannot be deleted"

  echo "Template has been deleted"
}

# DESCRIPTION: List all templates
# USAGE: listTemplates
listTemplates() {
  for template in "$(crc-env templateDirectory)"/* ; do
    if [[ -d $template ]]; then
      printf "%s\n" "${template##*/}"
    fi
  done
}

# DESCRIPTION: The entry point for the template functions
# USAGE: crc-template [COMMAND] [ARGUMENTS]
crc-template() {
  local commandToExec
  commandToExec="$1"
  shift

  case $commandToExec in
    create)
        createTemplate "$@"
      ;;
    copy)
        copyTemplate "$@"
      ;;
    edit)
        editTemplate "$@"
      ;;
    delete)
        deleteTemplate "$@"
      ;;
    list)
        listTemplates "$@"
      ;;
    *)
        crc-utils die "$(crc-env misuseErrorCode)" "An unknown command crc-template ""$commandToExec"
      ;;
  esac
}

crcTemplateLoaded=1
